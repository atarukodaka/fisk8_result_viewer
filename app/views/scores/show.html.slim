// locals: score

- content_for :title do
  | score: 
  = score.name

h2 Score
  
.row
  .col-sm-6
    table.table.table-striped.table-hover.table-condensed
      = tr_data(:skater, link_to_skater(score.skater))
      = tr_data(:competiiton, link_to_competition(score.competition))
      = tr_data(:category, link_to_competition(score.competition, category: score.category))
      = tr_data(:segment, link_to_competition(score.competition, category: score.category, segment: score.segment))
      - [:date, :tss, :tes, :pcs, :deductions].each do |key|
        = tr_data(key, score[key])
      = tr_data("Resulf PDF", link_to_pdf(score.result_pdf))
      = tr_data("Youtube search", link_to("Youtube", "http://www.youtube.com/results?q=" + h([score.skater.name, score.competition.name, score.segment].join('+')), target: "_blank"))
  .col-sm-6
        
h2 Elements

= render partial: "data_table", locals: { table: ListTable.new(score.elements, [:number, :name, :info, :base_value, :credit, :goe, :judges, :value]) , table_ld: "elements_table", disable_paging: true }
/= render partial: "list_table", locals: { display_keys: [:number, :name, :info, :base_value, :credit, :goe, :judges, :value] , collection: EntryDecorator.decorate_collection(score.elements) }

h2 Components

= render partial: "data_table", locals: { table: ListTable.new(score.components, [:number, :name, :factor, :judges, :value]), table_id: "components_id", disable_paging: true }
/= render partial: "list_table", locals: { display_keys: [:number, :name, :factor, :judges, :value] , collection: EntryDecorator.decorate_collection(score.components) }

- if score.deductions.to_f < 0
  h2 Deductions
  = score.deduction_reasons


