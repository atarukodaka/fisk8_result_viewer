- content_for :title do
  | score: #{score.name}

- breadcrumb :score, score

 
.row
  .col-sm-6
    h2= t("view.score.score_summary", default: "Score Summary")
    = score_summary.decorate.render

  .col-sm-6
    h2= t("view.score.relevant_video", default: "Relevant Video")
    - query = "#{score.skater.name} #{score.competition.name} #{score.segment}"
    - api_key = ENV['YOUTUBE_API_KEY']
    - if api_key.blank?
      div set ENV['YOUTUBE_API_KEY'] to search youtube videos.
    - else
      - begin
        - response = open("https://www.googleapis.com/youtube/v3/search?part=snippet&q='#{query}'&order=relevance&key=#{api_key}").read
        - json = JSON.parse(response)
        - if (item = json["items"].first)
          - video_id = item["id"]["videoId"]
          - video_title = item["snippet"]["title"]
          - video_published_at = item["snippet"]["publishedAt"].in_time_zone("UTC")
          iframe id="ytplayer" src="http://www.youtube.com/embed/#{video_id}" width=640 height=360
          ul
            li= "query: #{query}"
            li= "title: #{video_title}"
            li= "date: #{video_published_at}"
        - else
          div No relevant videos found
      - rescue OpenURI::HTTPError
        div HTTP ERROR
    div= link_to(t("view.score.see_other_relevant_videos", default: "see other relevant videos"), "http://www.youtube.com/results?q=#{query}")

h2= t("view.score.elements", default: "Elements")

= elements.update_settings(paging: false, info: false).default_orders([[:number, :asc]]).decorate.render

h2= t("view.score.components", default: "Components")

= components.update_settings(paging: false, info: false).default_orders([[:number, :asc]]).decorate.render

- if score.deductions.to_f < 0
  h2= t("view.score.deductions", default: "Deductions")
  = score.deduction_reasons


