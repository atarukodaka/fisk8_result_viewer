// locals: competition, category, segment, category_summaries
//   optional: results (only when 'category' specified)
/              segment_scores (only when 'segment' specified)

- content_for :title do
  | competition: 
  = [competition.name, category.try(:name), segment.try(:name)].reject(&:blank?).join(' / ')

- case result_type
- when :category
  - breadcrumb :competition_category, competition, category
- when :segment
  - breadcrumb :competition_segment, competition, category, segment
- else
  - breadcrumb :competition, competition

////////////////////////////////////////////////////////////////
.row
  .col-sm-6
    h2= t(".competition_summary", default: "Competition Summary")
    = Listtable.new(self).records(competition.decorate).columns([:name_info, :location, :site_url, :period, :comment]).render

////////////////////////////////////////////////////////////////
h2
  - case result_type
  - when :none
    = t('field.results', default: 'Results')
    /="#{t('field.category', default: 'Category')} / #{t('field.segment', default: 'Segment')}"
  - when :category
    | #{t(".category_results", default: "Category Results")} : #{category.name}
  - when :segment
    | #{t(".segment_results", default: "Segment Results")} : #{category.name} / #{segment.name}

////////////////
// nav bar for category/segment
.nav
  // category tab
  ul.nav.nav-tabs
    - competition.scores.includes(:category).map(&:category).uniq.each do |cat|
      - category_active = (category == cat) ? "active" : ""
      li class="#{category_active}"
        =link_to_competition(competition, category: cat)

  // segment tab
  - if category.present?
    ul.nav.nav-tabs
      - competition.scores.where(category: category).includes(:segment).map(&:segment).uniq.each do |seg|
        - segment_active = (segment == seg) ? "active" : ""
        li class="#{segment_active}"
          = link_to_competition(competition, category: category, segment: seg)

////////////////////////////////////////////////////////////////

- case result_type
  - when :category
    = category_results.update_settings(paging: false, info: false).decorate.render
  - when :segment
    = segment_results.update_settings(paging: false, info: false).decorate.render

.row
  .col-sm-6
    h2= t(".time_schedule", default: "Time Schedule")
    = time_schedule.decorate.render

  .col-sm-6
    - if result_type == :segment
      h3 Officials
      = officials.decorate.render



