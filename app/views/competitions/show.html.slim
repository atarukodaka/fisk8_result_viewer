// locals: competition, category, segment, category_summaries
//   optional: results (only when 'category' specified)
/              segment_scores (only when 'segment' specified)

- content_for :title do
  | competition: 
  = [competition.name, category, segment].reject(&:blank?).join(' / ')


- case result_type
- when :category
  - breadcrumb :competition_category, competition, category
- when :segment
  - breadcrumb :competition_segment, competition, category, segment
- else
  - breadcrumb :competition, competition

////////////////////////////////////////////////////////////////
h2 Competition Info

= competition_summary.decorate.render

////////////////////////////////////////////////////////////////
h2
  - case result_type
  - when :none
    | Category / Segment
  - when :category
    | Category Result of #{category}
  - when :segment
    | Segment Result of #{category}/#{segment}

////////////////
// nav bar for category/segment
.nav
  ul.nav.nav-tabs
    - competition.scores.order("date asc").pluck(:category).uniq.each do |c|
      - category_active = (category == c) ? "active" : ""
      li class="#{category_active}"
        =link_to_competition(competition, category: c)

  ul.nav.nav-tabs
    /- competition.scores.where(category: category).pluck(:segment).uniq.each do |s|
    - competition.scores.where(category: category).order("date asc").pluck(:segment).uniq.each do |s|
      - segment_active = (segment == s) ? "active" : ""
      li class="#{segment_active}"
        = link_to_competition(competition, category: category, segment: s)

////////////////////////////////////////////////////////////////

- if result_type != :none
  = results.update_settings(paging: false, info: false).decorate.render
    
