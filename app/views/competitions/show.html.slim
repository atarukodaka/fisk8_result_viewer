
- competition ||= @competition || Competition.none
- category ||= @category || ""
- segment ||= @segment || ""
- segment_scores ||= @segment_scores || competition.scores.where(category: category, segment: segment).order(:ranking) || []

////////////////////////////////////////////////////////////////
h2 Competition Info

table.table.table-striped.table-hover.table-condensed
  =tr_data("Name", competition.name)
  =tr_data("CID", competition.cid)
  =tr_data("City / Country", [competition.city, competition.country].join(' / '))
  =tr_data("Official Site", link_to_competition_site("Site", competition))
  =tr_data("Start Date", competition.start_date)
  =tr_data("End Date", competition.end_date)


////////////////////////////////////////////////////////////////
h2 Category Summary

table.table.table-striped.table-hover.table-condensed

  tr
    - [:category, :segments, "1st", "2nd", "3rd"].each do |header|
      th= header.to_s.camelize

  - competition.categories.each do |cat|
    tr
      td= link_to_competition(competition, category: cat)
      td
        - competition.segments(cat).each do |seg|
          = link_to_competition(competition, category: cat, segment: seg)
          span , 
      - rankers = competition.top_rankers(cat)[1..3] || []
      - rankers.each do |ranker|
        td= ranker.name

- if category.present?
  - unless segment.present?
    ////////////////////////////////////////////////////////////////
    h2 
      | Category Result of 
      = category
    - keys = [:ranking, :skater_name, :nation, :points, :short_ranking, :free_ranking]
    - category_results = competition.category_results.search_by_category(category)
    = render partial: "list_table", locals: {keys: keys, collection: category_results, patination: false}

  - else
    ////////////////////////////////////////////////////////////////
    h2 
      | Segment Result of 
      = [category, segment].join('/')
    - keys = [:ranking, :skater_name, :nation, :starting_number, :tss, :tes, :pcs, :deductions]
    = render partial: "list_table", locals: {keys: keys , collection: segment_scores, pagination: false}

