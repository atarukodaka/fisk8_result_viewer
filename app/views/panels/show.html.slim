- breadcrumb :panel, panel

h2= panel.name
.row
  .col-sm-4
    table.table.table-striped.table-hover.table-condensed
      - summary.each do |key, value|
        tr
          th= key.to_s.humanize
          td= value


h3 Participated Segments
= participated_segments_datatable.decorate.render

h3 Deviation
- columns = [:score_name, :skater_name, :official_number, :tes_deviation, :tes_ratio, :pcs_deviation, :pcs_ratio]
- dt = DeviationsDatatable.new(self).records(Deviation.where(panel: panel).includes(:panel, :official, score: [:skater]))
= dt.decorate.render

/- tes_devs = ElementJudgeDetail.where("officials.panel_id": panel.id).includes(:official, [element: [ score: [ :skater ]]]).group("elements.score_id").sum(:abs_deviation)  
/- pcs_devs = ComponentJudgeDetail.where("officials.panel_id": panel.id).includes(:official, [component: [ score: [ :skater ]]]).group("components.score_id").sum(:deviation)  
/- scores = Score.where(id: tes_devs.keys).includes(:skater).index_by(&:id)
/- columns = [:score, :skater, :tes_deviation, :pcs_deviation]
/- data = scores.map {|score_id, score|  [link_to_score(score), link_to_skater(score.skater), "%.4f" % [tes_devs[score_id]], "%.4f" % [pcs_devs[score_id]] ]}
- settings = { info: false, pageLength: 25 }
/= render partial: "simple_datatable", locals: { columns: deviation_table[:columns], data: deviation_table[:data] , settings: settings}

/h3 By Skater
/- hash = ElementJudgeDetail.includes(element: [score: [:skater]]).where("officials.panel": panel).joins(:official, element: [score: [:skater]]).group("scores.skater_id").average(:deviation)
/- skaters = Skater.where(id: hash.keys).index_by(&:id)

/script
  | jQuery(function($){ $("#summary_table").DataTable() });

/.row
  .col-sm-4
    table.table.table-striped.table-hover.table-condensed#summary_table
      tr
        th #
        th Skater
        th Nation
        th Deviation to average
      - hash.sort {|(k1, v1), (k2, v2)|  v1 <=> v2}.each.with_index(1) do |(skater_id, avg_deviation), i|
        - skater = skaters[skater_id]
        tr
          td= i
          td= link_to_skater(skater)
          td= skater.nation
          td= sprintf("%.4f", avg_deviation)


/h3 Judged Scores
/- dt = AjaxDatatables::Datatable.new(self).records(Score.includes(:competition, :category, :segment).joins(performed_segment: [ :officials]).where("officials.panel_id": panel.id)).columns([:competition_name, :category_name, :segment_name]).decorate
/- records = Score.where("officials.panel_id": panel.id).includes(:skater, elements: [ element_judge_details: [:official]])
/- records = ElementJudgeDetail.includes(:official, element: [score: [:skater]]).references(:officials, element: [:score, score: [:skater]]).where("officials.panel": panel).distinct("elements.score_id")
/- dt = AjaxDatatables::Datatable.new(self).records(records).columns([:id, :skater_name, :element_name])
/= render partial: "datatable", locals: { datatable: dt}

/h3 Elements
/- element_records = ElementJudgeDetail.includes(:official, element: [score: [:skater]]).references(:officials, element: [:score, score: [:skater]]).where("officials.panel": panel)
/- dt = AjaxDatatables::Datatable.new(self).columns([:score_name, :skater_name, :element_name, :value]).records(element_records)
/= render partial: "datatable", locals: { datatable: dt }

/h3 Components
/- component_records = ComponentJudgeDetail.includes(:official, component: [score: [:skater]]).references(:officials, component: [:score, score: [:skater]]).where("officials.panel": panel)
/- dt = AjaxDatatables::Datatable.new(self).columns([:score_name, :skater_name, :component_name, :value]).records(component_records)
/= render partial: "datatable", locals: { datatable: dt }
