
- category ||= "MEN"
- season ||= Competition.recent.first.season
- competition_class = "isu"

////////////////////////////////////////////////////////////////
h2 Statics by Skater

= form_tag statics_path, method: :get, enforce_utf8: false, id: :filter_form do |f|
  = form_group("Category", select_tag_with_options(:category))
  = form_group("Season", select_tag_with_options(:season, value: params[:season]))  
  = form_group(nil, submit_tag("Resfresh", id: :submit, nil: nil))

- scores = Score.joins(:skater, :competition, :elements).where(category: category, "competitions.competition_class": competition_class, "competitions.season": season).group(:skater_id)
style
  | .dataTables_filter { visibility:hidden; }

////////////////////////////////////////////////////////////////
h3 Highest  Score
- results = Result.joins(:competition, :skater, :scores).where(category: category, "competitions.competition_class": competition_class, "competitions.season": season).group(:skater_id)
.row
  .col-sm-4
    h4 Total Score
    - data = results.select("skaters.name as skater_name_", "max(points) as max_points").order("max(points) desc")
    - cols = [:skater_name_, :max_points]
    = Datatable.new(data, only: cols).render(self)

  .col-sm-4
    h4 Base Value
    - data = results.select("skaters.name as skater_name_", "max(total_bv) as max_total_bv").order("max(total_bv) desc")
    - cols = [:skater_name_, :max_total_bv]
    = Datatable.new(data.decorate, only: cols).render(self)

  .col-sm-4
    h4 GOE
    - data = results.select("skaters.name as skater_name_", "max(total_goe) as max_total_goe").order("max(total_goe) desc")
    - cols = [:skater_name_, :max_total_goe]
    = Datatable.new(data.decorate, only: cols).render(self)

 
////////////////////////////////////////////////////////////////

h3 Average Values

- [:all, :jump, :spin, :step].each do |element_type|
  h3= element_type.to_s.pluralize.humanize
  .row
    - [:value, :base_value, :goe].each do |key|
      .col-sm-4
        h4= key.to_s.humanize
        - data = scores.order("avg(elements.#{key}) desc").select("skaters.name as skater_name_, avg(elements.#{key}) as avg_#{key}")
        - data = data.where("elements.element_type": element_type) if element_type != :all
        - cols = [:skater_name_, "avg_#{key}".to_sym]
        /- data.each do |item|
          - item["avg_#{key}"] = "%.2f" % item["avg_#{key}"]
        = Datatable.new(data.decorate, only: cols).render(self)

