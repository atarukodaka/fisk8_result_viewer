
- category ||= "MEN"
- season ||= "2016-17"
- competition_class = "isu"

////////////////////////////////////////////////////////////////
h2 Statics by Skater

= form_tag statics_path, method: :get, enforce_utf8: false, id: :filter_form do |f|
  = form_group("Category", select_tag_with_options(:category))
  = form_group("Season", select_tag_with_options(:season))  
  = form_group(nil, submit_tag("Resfresh", id: :submit, nil: nil))

- results = Result.includes(:competition, :skater, :scores).where(category: category, "competitions.competition_class": competition_class, "competitions.season": season).group(:skater_id)
- scores = Score.joins(:skater, :competition, :elements).where(category: category, "competitions.competition_class": competition_class, "competitions.season": season).group(:skater_id)
style
  | .dataTables_filter { visibility:hidden; }

////////////////////////////////////////////////////////////////
h3 Highest  Score
.row
  .col-sm-6
    h4 Total Score
    - data = results.order("points desc")
    - cols = [:skater_name, :points, :ranking, :short_ranking, :free_ranking]
    = Datatable.new(data, only: cols).render(self)

  .col-sm-6
    h4 Base Value
    - data = results.order("total_bv desc").group(:skater_id)

    - cols = [:skater_name, :total_bv]
    - data.each do |item|
      - item[:total_bv] = "%.2f" % item[:total_bv]

    = Datatable.new(data, only: cols).render(self)

 
////////////////////////////////////////////////////////////////

- [:jump, :spin, :step].each do |element_type|
  h3= element_type.to_s.pluralize.humanize
  .row
    - [:value, :base_value, :goe].each do |key|
      .col-sm-4
        h4= key.to_s.humanize
        - data = scores.order("avg(elements.#{key}) desc").select("skaters.name as skater_name, avg(elements.#{key}) as avg_#{key}").where("elements.element_type": element_type)
        - cols = [:skater_name, "avg_#{key}".to_sym]
        - data.each do |item|
          - item["avg_#{key}"] = "%.2f" % item["avg_#{key}"]
        = Datatable.new(data, only: cols).render(self)

