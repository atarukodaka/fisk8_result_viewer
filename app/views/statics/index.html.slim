- category ||= "MEN"
- season ||= Competition.recent.first.season
- competition_class ||= nil

- breadcrumb :statics

////////////////////////////////////////////////////////////////
h2 Statics by Skater: Category of '#{category}' in the season of '#{season}'

= form_tag statics_path, method: :get, enforce_utf8: false, id: :filter_form do |f|
  = form_group("Category", select_tag_with_options(:category))
  = form_group("Season", select_tag_with_options(:season, value: params[:season]))  
  = form_group("Competition Class", select_tag_with_options(:competition_class, value: params[:competition_class]))  
  = form_group(nil, submit_tag("Resfresh", id: :submit, name: nil))


style
  | .dataTables_filter { visibility:hidden; }

////////////////////////////////////////////////////////////////
hr
h3 Highest  Score
.row
  .col-sm-4
    h4 Total Score
    - data = results.group(:skater_id).select("skaters.name as skater_name_", "max(points) as max_points").order("max(points) desc")
    - cols = [:skater_name_, :max_points]
    = Datatable.new(data.decorate, only: cols).render(self)

  .col-sm-4
    h4 Short
    - data = short_scores.group(:skater_id).select("skaters.name as skater_name_", "max(tss) as max_tss").order("max(tss) desc")
    - cols = [:skater_name_, :max_tss]
    = Datatable.new(data.decorate, only: cols).render(self)

  .col-sm-4
    h4 Free
    - data = free_scores.group(:skater_id).select("skaters.name as skater_name_", "max(tss) as max_tss").order("max(tss) desc")
    - cols = [:skater_name_, :max_tss]
    = Datatable.new(data.decorate, only: cols).render(self)

.row
  .col-sm-4
    h4 Base Value
    - data = results.group(:skater_id).select("skaters.name as skater_name_", "max(total_bv) as max_total_bv").order("max(total_bv) desc")
    - cols = [:skater_name_, :max_total_bv]
    = Datatable.new(data.decorate, only: cols).render(self)

  .col-sm-4
    h4 GOE
    - data = results.group(:skater_id).select("skaters.name as skater_name_", "max(total_goe) as max_total_goe").order("max(total_goe) desc")
    - cols = [:skater_name_, :max_total_goe]
    = Datatable.new(data.decorate, only: cols).render(self)

////////////////////////////////////////////////////////////////

hr
h3 Average Values

- [nil, :jump, :spin, :step].each do |element_type|
  h4= (element_type) ? element_type.to_s.pluralize.humanize : "All Element Type"
  .row
    - [:value, :base_value, :goe].each do |key|
      .col-sm-4
        h5= key.to_s.humanize
        - data = elements.order("avg(elements.#{key}) desc").select("skaters.name as skater_name_, avg(elements.#{key}) as avg_#{key}").group(:skater_id)
        - data = data.where("elements.element_type": element_type) if element_type
        - cols = [:skater_name_, "avg_#{key}".to_sym]
        = Datatable.new(data.decorate, only: cols).render(self)

////////////////////////////////////////////////////////////////
h3 Levels

.row
  - [:spin, :step].each do |element_type|
    .col-sm-6
      h4= element_type.to_s.humanize
      - key = "level"
      - data = elements.order("avg(elements.#{key}) desc").select("skaters.name as skater_name_, avg(elements.#{key}) as avg_#{key}").group(:skater_id)
      - data = data.where("elements.element_type": element_type) if element_type
      - data = data.where.not("elements.name like ? ", "Ch%") if element_type == :step
      - cols = [:skater_name_, "avg_#{key}".to_sym]
      = Datatable.new(data.decorate, only: cols).render(self)


////////////////////////////////////////////////////////////////
hr
h3 Components Scores

- pcs_abbr = [:Total, :SS, :TR, :CO, :PE, :IN]
.row
  - [0, 1, 2,].each do |num|
    .col-sm-4
      h4= pcs_abbr[num]
      - data = components.order("avg(components.value) desc").select("avg(components.value) as avg_value, skaters.name as skater_name_").group(:skater_id)
      - data = data.where(number: num) if num > 0
      - cols = [:skater_name_, :avg_value]
      = Datatable.new(data.decorate, only: cols).render(self)

.row
  - [3, 4, 5,].each do |num|
    .col-sm-4
      h4= pcs_abbr[num]
      - data = components.order("avg(components.value) desc").select("avg(components.value) as avg_value, skaters.name as skater_name_").group(:skater_id)
      - data = data.where(number: num) if num > 0
      - cols = [:skater_name_, :avg_value]
      = Datatable.new(data.decorate, only: cols).render(self)
