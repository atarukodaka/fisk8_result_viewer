- category = Category.find_by(name: params[:category] || "MEN")
- season = params[:season] || Competition.recent.first.try(:season)

= form_tag statics_path, method: :get, enforce_utf8: false, id: :statics_form do |f|
  = form_group(Competition.human_attribute_name(:season), select_tag_with_options(:season, onchange:"$('#statics_form').submit()"))
  = form_group(Score.human_attribute_name(:category), select_tag_with_options(:category, onchange: "$('#statics_form').submit()"))
  = form_group(nil, button_tag("REFRESH", type: :submit))

////////////////////////////////////////////////////////////////
h3= t(".highest_score", default: "Highest  Score")

h4= t(".total_score", default: "Total Score")
.row
  .col-sm-12
    - cols = [:no, :skater_name, :nation, :competition_name, :points, :short_ranking, :short_tss, :free_ranking, :free_tss]
    - records = CategoryResult.includes(:competition, :skater, :short, :free).order(points: :desc).where("competitions.season" => season, category: category)
    = StaticsDatatable.new(self).records(records).columns(cols).decorate.render

.row
  - cols = [:no, :skater_name, :nation, :name, :tss, :tes, :pcs]
  - records = Score.includes(:competition, :skater).order(tss: :desc).where("competitions.season" => season, category: category)
  .col-sm-6
    h4= t(".short", default: "Short")
    = StaticsDatatable.new(self).records(records.short).columns(cols).decorate.render
     
  .col-sm-6
    h4= t(".free", default: "Free")
    = StaticsDatatable.new(self).records(records.free).columns(cols).decorate.render

h3= t(".most_valuable_elements", default:  "Most Valuable Elements")

.row
  - records = Element.includes(:score, score: [:competition, :skater]).where("competitions.season" => season, "scores.category" => category).order(value: :desc).references(:score, score: [:competition])
  - cols = [:no, :skater_name, :score_name, :name, :base_value, :goe, :value]
  .col-sm-6
    h4= t(".jump", default: "Jump")
    = render partial: "element_datatable", locals: {element_type: "jump", cols: cols, records: records}
  .col-sm-6
    h4= t(".spin", default: "Spin")
    = render partial: "element_datatable", locals: {element_type: "spin", cols: cols, records: records}

.row
  .col-sm-6
    h4= t(".step", default: "Step")
    = render partial: "element_datatable", locals: {element_type: "step", cols: cols, records: records}

  .col-sm-6
    h4= t(".choreo", default: "Choreo")
    = render partial: "element_datatable", locals: {element_type: "choreo", cols: cols, records: records}
.row
  .col-sm-6
    h4= t(".lift", default: "Lift")
    = render partial: "element_datatable", locals: {element_type: "lift", cols: cols, records: records}

  .col-sm-6
    h4= t(".death_spiral", default: "Death Spiral")
    = render partial: "element_datatable", locals: {element_type: "death_spiral", cols: cols, records: records}


- if category =~ /ICE DANCE/
  .row
    .col-sm-6
      h4= t(".twizzle", default:  "Twizzle")
      = render partial: "element_datatable", locals: {element_type: "twizzle", cols: cols, records: records}


    .col-sm-6
      h4= t(".pattern_dance", default: "Pattern Dance")
      = render partial: "element_datatable", locals: {element_type: "pattern_dance", cols: cols, records: records}

h3 PCS

.row
  - cols = [:no, :skater_name, :pcs, :component_SS, :component_TR, :component_PE, :component_CO, :component_IN]
  .col-sm-6
    h4= t(".short", default: "Short")
    - records = Score.includes(:competition, :skater, :components).order(pcs: :desc).where("competitions.season" => season, category: category).short
    = StaticsDatatable.new(self).records(records).columns(cols).decorate.render

  .col-sm-6
    h4= t(".free", default: "Free")
    - records = Score.includes(:competition, :skater, :components).order(pcs: :desc).where("competitions.season" => season, category: category).free
    = StaticsDatatable.new(self).records(records).columns(cols).decorate.render

